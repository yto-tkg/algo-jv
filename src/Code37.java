public class Code37 {
    public static void main(String[] args) {

        // ChatGPT解説
        // このコードは、与えられた文字列 S の全ての隙間に + を挿入する組み合わせを列挙して、計算するアルゴリズムです。
        //
        //具体的には、与えられた文字列 S の長さを N として、N-1 個の隙間に + を入れるかどうかをビット演算で全て試します。
        // つまり、0 から 2^(N-1)-1 までの整数 bit に対して、bit の各ビットが 0 か 1 かに応じて、
        // S の各文字の間に + を挿入するかどうかを判断します。
        // このとき、各ビット i が 1 であれば、S の i 番目と i+1 番目の文字の間に + を挿入します。
        //
        //上記の処理を行うために、まず変数 res を初期化し、ビット演算によって列挙された bit に対して、
        // 各ビットに応じて S の各文字の値を取得して tmp という変数に格納します。
        // 次に、bit の各ビットが 1 であれば、tmp を res に加算し、tmp を 0 に初期化します。
        // 最後に、残った tmp を res に加算し、結果を出力します。
        //
        //このアルゴリズムの時間計算量は、ビット演算による全探索によって O(2^N) であり、
        // 入力の文字列の長さ N に対して指数関数的に増加するため、
        // 大きな入力に対しては実行時間が爆発的に増加する可能性があります。

        String S = "125";
        int N = S.length();

        // N-1 箇所の隙間に「+」を入れるかどうかをすべて試す
        long res = 0;
        // 1<<(N-1) -> O(2^(N-1))
        for (int bit = 0; bit < (1<<(N-1)); ++bit) {
            // tmp：「+」と「+」との間の値を表す変数
            long tmp = 0;
            // O(N-1)
            for (int i = 0; i < N-1; ++i) {
                // 左にシフト
                tmp *= 10;
                // 下位桁に追加
                tmp += S.charAt(i) - '0';

                // 「+」を挿入するとき、答えに tmp を加算して、tmp を 0 に初期化
                if ((bit & (1<<i)) > 0) {
                    res += tmp;
                    tmp = 0;
                }
            }

            // 最後の「+」から残りの部分を答えに加算
            tmp *= 10;
            tmp += S.charAt(N-1) - '0';
            res += tmp;
        }
        System.out.println(res);

        // O((N-1) * 2^(N-1)) -> O(N2^N)

        // int N = 3;
        // 1<<(N-1)
        // について
        //
        // このコードは、整数 N の値を 3 に設定して、2 の (N-1) 乗を計算しています。
        // ここでは、N が 3 であるため、(N-1) は 2 になります。
        // よって、1 << (N-1) は、1 << 2 と同じであり、2 を 2 乗した値である 4 を表します。
        //
        //ビット演算子 << は、左オペランドの値を右オペランドのビット数だけ左にシフトします。
        // つまり、1 << 2 は、2 進数で 0001 を 2 ビット左にシフトして 0100 を作成するため、結果は 4 になります。
        //
        //このコードの出力結果は、整数値 4 です。
        // この値は、整数 N が 3 の場合、N-1 個の隙間に + を入れるかどうかをビット演算で
        // 全て試すために必要な試行回数を表します。
        // つまり、文字列の隙間に + を挿入する場合の組み合わせが 4 通りあることを示します。

        // S.charAt(i) - '0';
        // について

        // このコードは、文字列 S の i 番目の文字を取得し、ASCII コード表における数字文字 '0' のコード値を引いた値を計算しています。これにより、文字列から数字を抽出しています。
        //
        //ASCII コード表において、数字文字 '0' のコード値は 48 です。
        // つまり、S.charAt(i) - '0' は、文字列 S の i 番目の文字のコード値から 48 を引いた値を返します。
        // この値は、0 から 9 までの数字文字に対しては、それぞれ 0 から 9 までの整数値を表し、
        // それ以外の文字に対しては、意図しない値を返します。
        //
        //したがって、このコードは、文字列 S の i 番目の文字が数字である場合に、その数字を整数値として取得するために使用されます。
    }
}
